{\rtf1\ansi\deff0
\b ERP Starter Kit Documentation \b0\par
Version 1.0.1 â€” Tahun 2025\par
\par
\b Tabel Isi \b0\par
1. Ringkasan Arsitektur\par
2. Backend (CodeIgniter 4)\par
   2.1 Routing\par
   2.2 Filter JWT\par
   2.3 Controllers\par
   2.4 Models\par
   2.5 Alur Autentikasi (JWT)\par
3. Frontend (Next.js + React)\par
   3.1 HTTP Client (Axios)\par
   3.2 Auth Context & ProtectedRoute\par
   3.3 Halaman-Halaman Utama\par
   3.4 Halaman Roles\par
   3.5 Halaman Menus\par
4. Alur Kerja Ujung-ke-Ujung\par
5. Endpoint API Utama\par
6. Menjalankan Aplikasi\par
7. Troubleshooting\par
\par
\b 1. Ringkasan Arsitektur \b0\par
Aplikasi ini terdiri dari:\par
- Backend: CodeIgniter 4 yang menyediakan REST API, validasi, middleware JWT, dan akses database.\par
- Frontend: Next.js (App Router) dengan React, yang memanggil API via Axios, mengelola state autentikasi (token & user), dan menampilkan UI halaman.\par
\par
\b 2. Backend (CodeIgniter 4) \b0\par
\par
\b 2.1 Routing \b0\par
File: backend/app/Config/Routes.php\par
- Group prefix "api" untuk semua endpoint.\par
- Auth: POST /api/register, POST /api/verify-otp, POST /api/login.\par
- Protected endpoints (dengan filter jwt):\par
  - GET /api/dashboard/stats\par
  - GET/PUT /api/profile, PUT /api/profile/change-password\par
  - resource /api/menus (CRUD)\par
  - resource /api/roles (CRUD)\par
  - GET/POST /api/roles/{id}/permissions\par
- OPTIONS /api/(:any): mengembalikan 204 untuk preflight CORS.\par
\par
\b 2.2 Filter JWT \b0\par
File: backend/app/Filters/JWTFilter.php\par
- \i before()\i0: Mengizinkan method OPTIONS lewat tanpa cek token (CORS).\par
- Mengambil Authorization: Bearer <token> dari header.\par
- Validasi token HS256 menggunakan secret (env: jwt.secret), mengembalikan 401 jika token tidak ada/invalid.\par
\par
\b 2.3 Controllers \b0\par
\par
AuthController (backend/app/Controllers/AuthController.php):\par
- \i getPayload()\i0: Mengambil payload aman dari JSON/raw input/POST.\par
- \i register()\i0: Validasi name/email/password, membuat user role default, generate OTP 6 digit dengan masa berlaku 10 menit, kirim email OTP, balas 201.\par
- \i verify_otp()\i0: Validasi email/otp, cek kecocokan dan masa berlaku, kosongkan otp\_code & otp\_expires\_at, balas sukses.\par
- \i login()\i0: Validasi email/password, pastikan OTP sudah terverifikasi (otp\_code null), verifikasi hash password, buat JWT HS256 berisi uid/email/role, waktu iat/exp, balas token.\par
\par
DashboardController (backend/app/Controllers/DashboardController.php):\par
- \i getStats()\i0: Catat kunjungan (user\_id dari token), hitung agregasi total users/visits dan rentang hari/minggu/bulan/tahun, balas objek statistik.\par
\par
UserController (backend/app/Controllers/UserController.php):\par
- \i getProfile()\i0: Ambil user dari uid token, kembalikan id/name/email/role (+timestamps jika ada).\par
- \i updateProfile()\i0: Validasi name + email unik (kecuali user saat ini), update nama/email.\par
- \i changePassword()\i0: Validasi old/new/confirm, verifikasi hash old password, update password (model akan menghash), balas sukses.\par
\par
MenuController (backend/app/Controllers/MenuController.php):\par
- \i index()\i0: Ambil semua menus.\par
- \i show(id)\i0: Ambil satu menu, atau 404.\par
- \i create()\i0: Buat menu dari JSON body; balas 201 jika berhasil.\par
- \i update(id)\i0: Update menu; balas 200 jika berhasil.\par
- \i delete(id)\i0: Hapus menu; balas 200 atau 404.\par
\par
RoleController (backend/app/Controllers/RoleController.php):\par
- \i index()/show(id)/create()/update(id)/delete(id)\i0: CRUD roles dengan status yang sesuai.\par
- \i getPermissions(role\_id)\i0: Ambil semua role\_permissions role tersebut.\par
- \i updatePermissions(role\_id)\i0: Hapus semua permissions untuk role lalu insert batch dari JSON menu\_ids[].\par
\par
\b 2.4 Models \b0\par
\par
UserModel (backend/app/Models/UserModel.php):\par
- allowedFields: name, email, password, role\_id, otp\_code, otp\_expires\_at, remember\_token.\par
- timestamps created\_at/updated\_at.\par
- \i beforeInsert/beforeUpdate: hashPassword()\i0: jika ada "password" di payload, di-hash dengan PASSWORD\_DEFAULT.\par
\par
RoleModel (backend/app/Models/RoleModel.php):\par
- allowedFields: role\_name, description; timestamps.\par
\par
MenuModel (backend/app/Models/MenuModel.php):\par
- allowedFields: menu\_name, parent\_id, url, icon, menu\_order; timestamps.\par
\par
\b 2.5 Alur Autentikasi (JWT) \b0\par
1. \b Registrasi\b0: Klien memanggil POST /api/register dengan name/email/password.\par
2. Server mengirim OTP via email dan mengembalikan data untuk verifikasi (di non-produksi menampilkan OTP untuk uji lokal).\par
3. \b Verifikasi OTP\b0: Klien memanggil POST /api/verify-otp dengan email dan otp.\par
4. \b Login\b0: Klien memanggil POST /api/login, server menghasilkan token JWT HS256 berisi uid, email, role, iat, exp.\par
5. \b Proteksi\b0: Endpoint protected menggunakan Filter JWT yang memverifikasi token di header Authorization.\par
\par
\b 3. Frontend (Next.js + React) \b0\par
\par
\b 3.1 HTTP Client (Axios) \b0\par
File: frontend/src/lib/api.ts\par
- baseURL: http://localhost:9000/api\par
- Interceptor request: mengambil token dari localStorage (browser) dan menambahkan Authorization: Bearer <token> ke setiap request.\par
\par
\b 3.2 Auth Context & ProtectedRoute \b0\par
AuthContext (frontend/src/contexts/AuthContext.tsx):\par
- State: user, token, isAuthenticated.\par
- Saat token tersedia, memanggil GET /api/profile untuk memuat user; jika gagal, \i logout()\i0.\par
- \i login(newToken)\i0 menyimpan token ke localStorage, \i logout()\i0 menghapus token dan user.\par
\par
ProtectedRoute (frontend/src/components/ProtectedRoute.tsx):\par
- Jika tidak authenticated, redirect ke /login dan menampilkan Loading...\par
- Jika authenticated, menampilkan children.\par
\par
Layout global AppShell (frontend/src/components/AppShell.tsx):\par
- Menampilkan Topbar + Sidebar + konten utama + Footer.\par
- Disembunyikan pada /login dan /register.\par
\par
\b 3.3 Halaman-Halaman Utama \b0\par
Login (frontend/src/app/login/page.tsx):\par
- Form email/password, POST /api/login, menyimpan token via AuthContext, redirect ke /dashboard.\par
\par
Register (frontend/src/app/register/page.tsx):\par
- Step 1: POST /api/register.\par
- Step 2: Verifikasi OTP via POST /api/verify-otp dan redirect ke /login.\par
\par
Dashboard (frontend/src/app/dashboard/page.tsx):\par
- Menampilkan statistik dari GET /api/dashboard/stats.\par
\par
Profile (frontend/src/app/profile/page.tsx):\par
- GET /api/profile, edit profile, dan change password via PUT.\par
\par
\b 3.4 Halaman Roles (frontend/src/app/roles/page.tsx) \b0\par
- List roles dengan kolom Role, Description, Created At, Updated At, Actions.\par
- Tambah Role (modal): POST /api/roles.\par
- Edit Role (modal): PUT /api/roles/:id.\par
- Permissions (modal):\par
  - Memuat menus dan permissions paralel.\par
  - Pre-check checkbox berdasarkan role\_permissions.\par
  - Check All/Uncheck All.\par
  - Grouping berdasarkan parent\_id dengan tombol "Check Group/Uncheck Group".\par
  - Submit: POST /api/roles/:id/permissions dengan menu\_ids[].\par
- Pencarian dan Paging: client-side filter dan paging dengan Page size.\par
\par
\b 3.5 Halaman Menus (frontend/src/app/menus/page.tsx) \b0\par
- Tabel daftar menus: kolom Name, Parent, URL, Icon, Order, Actions.\par
- Pencarian dan Paging: filter nama/URL, kontrol Page size, Prev/Next.\par
- Tambah Menu (modal):\par
  - Form name, URL, icon (opsional), order.\par
  - Parent id dengan "Select2-like" (input cari + daftar opsi yang difilter; klik untuk pilih, tombol reset ke Root).\par
  - Submit: POST /api/menus.\par
- Edit Menu (modal):\par
  - Mengisi payload dari baris yang dipilih.\par
  - Parent id "Select2-like" seperti di tambah.\par
  - Submit: PUT /api/menus/:id.\par
- Delete Menu: Hapus dengan konfirmasi, kemudian panggil DELETE /api/menus/:id.\par
\par
\b 4. Alur Kerja Ujung-ke-Ujung \b0\par
1. Pengguna mendaftar, menerima OTP via email, memverifikasi OTP.\par
2. Pengguna login, token disimpan di localStorage, semua request API protected menyertakan Authorization: Bearer.\par
3. Frontend memuat data (misal roles/menus) dari API, menampilkan di tabel, mengelola modal tambah/edit.\par
4. Perubahan (tambah/edit/permissions) dikirim ke backend (POST/PUT), backend memvalidasi/menyimpan, frontend refresh data.\par
\par
\b 5. Endpoint API Utama \b0\par
- POST /api/register: registrasi user.\par
- POST /api/verify-otp: verifikasi OTP.\par
- POST /api/login: login dan mendapatkan JWT.\par
- GET /api/profile, PUT /api/profile, PUT /api/profile/change-password.\par
- GET /api/dashboard/stats.\par
- GET/POST/PUT/DELETE /api/menus, /api/menus/:id.\par
- GET/POST/PUT/DELETE /api/roles, /api/roles/:id.\par
- GET /api/roles/:id/permissions, POST /api/roles/:id/permissions.\par
\par
\b 6. Menjalankan Aplikasi \b0\par
- Backend: \i php spark serve --port 9000\i0 (pastikan .env memiliki jwt.secret dan konfigurasi email jika diperlukan).\par
- Frontend: \i npm install && npm run dev\i0, akses halaman di browser (misal /login, /dashboard, /menus, /roles).\par
\par
\b 7. Troubleshooting \b0\par
- \b Token invalid\b0: Pastikan Authorization header berformat "Bearer <token>" dan jwt.secret dikonfigurasi.\par
- \b OTP tidak terkirim\b0: Cek konfigurasi SMTP di .env dan Config\\Email.php; pada non-produksi, respons register menyertakan OTP untuk uji.\par
- \b Perbedaan bentuk payload permissions\b0: Frontend menerapkan parser robust yang menormalkan menu\_ids dari berbagai bentuk payload.\par
- \b CORS preflight 404\b0: Routes.php sudah menambahkan OPTIONS handler untuk /api/(:any) agar mengembalikan 204.\par
\par
Dokumen ini merangkum cara kerja sistem, komponen utama, serta alur interaksi antara frontend dan backend.\par
}
\par
\b 8. Penjelasan OOP dan Fungsi (Backend & Frontend) \b0\par
\par
\b 8.1 Konsep OOP yang Digunakan \b0\par
- \b MVC (Model-View-Controller)\b0: Backend menggunakan pola MVC. \i Controllers\i0 menangani HTTP request/response, \i Models\i0 menangani akses data dan aturan, \i Views\i0 (opsional) untuk rendering (di proyek ini fokus REST JSON).\par
- \b Kelas dan Inheritance\b0: Controllers mewarisi \i BaseController\i0; Models mewarisi \i CodeIgniter\Model\i0 untuk mendapatkan method CRUD standar dan dukungan timestamps.\par
- \b Encapsulation\b0: Models menyembunyikan detail data melalui properti \i protected\i0 seperti \i $allowedFields\i0, \i $useTimestamps\i0, sehingga kontrol penulisan kolom terpusat.\par
- \b Polymorphism & Interfaces\b0: \i JWTFilter\i0 mengimplementasikan \i FilterInterface\i0, menyediakan \i before()\i0/\i after()\i0 yang dipanggil oleh pipeline framework untuk berbagai route (polymorphic behavior).\par
- \b Traits\b0: Controllers menggunakan \i ResponseTrait\i0 untuk menyediakan method \i respond()\i0, \i fail()\i0, \i respondCreated()\i0 secara reusable.\par
- \b Callbacks (Hooks)\b0: \i UserModel\i0 mendefinisikan \i beforeInsert\i0/\i beforeUpdate\i0 untuk hashing password otomatis sebelum data disimpan.\par
- \b Composition & Services\b0: Controllers menggunakan \i Services::email()\i0, \i Services::request()\i0 untuk memanfaatkan komponen lain melalui komposisi.\par
\par
Di Frontend (React + TypeScript), pendekatan lebih \b komposisional\b0 dibanding OOP klasik:\par
- Komponen fungsional (function components) untuk UI dan logika.\par
- \i Hooks\i0 (useState/useEffect) untuk stateful behavior.\par
- \i Context\i0 (AuthContext) untuk dependency injection gaya React (mendistribusikan auth state dan fungsi \i login/logout\i0 ke anak).\par
- \i Modularitas\i0 dan pemisahan tanggung jawab (api.ts untuk HTTP client, komponen untuk layout/guard, halaman untuk fitur domain).\par
\par
\b 8.2 Penjelasan Kelas & Fungsi Backend \b0\par
\par
\b AuthController \b0 (backend/app/Controllers/AuthController.php)\par
- \i getPayload():\i0 membaca isi request secara aman (JSON/raw/POST) untuk validasi konsisten.\par
- \i register():\i0 validasi input; membuat user default; menghasilkan OTP 6-digit (masa 10 menit); kirim email; balas 201 (non-produksi menyertakan OTP untuk pengujian).\par
- \i verify_otp():\i0 validasi email+otp; cek kesesuaian/masa berlaku; kosongkan kolom OTP; balas sukses.\par
- \i login():\i0 validasi email+password; pastikan OTP sudah diverifikasi; verifikasi hash password; buat JWT HS256 (uid, email, role, iat, exp); balas token.\par
\par
\b DashboardController \b0 (backend/app/Controllers/DashboardController.php)\par
- \i getStats():\i0 catat kunjungan user; hitung agregasi kunjungan rentang hari/minggu/bulan/tahun dan total users; balas objek statistik.\par
- \i getUserIdFromToken():\i0 decode Authorization Bearer JWT untuk mendapatkan \i uid\i0.\par
\par
\b UserController \b0 (backend/app/Controllers/UserController.php)\par
- \i getPayload():\i0 sama seperti di Auth; menyatukan cara membaca body.\par
- \i getProfile():\i0 ambil user dari uid token; kembalikan data aman (id, name, email, role, timestamps opsional).\par
- \i updateProfile():\i0 validasi name + email unik (kecuali user saat ini); update nama/email.\par
- \i changePassword():\i0 validasi old/new/confirm; verifikasi hash old; update password (diproses callback hashing model).\par
\par
\b MenuController \b0 (backend/app/Controllers/MenuController.php)\par
- \i index():\i0 daftar semua menu.\par
- \i show(id):\i0 ambil satu menu atau 404.\par
- \i create():\i0 validasi & membuat menu baru dari JSON; balas 201.\par
- \i update(id):\i0 update menu; balas 200.\par
- \i delete(id):\i0 hapus menu; balas 200 atau 404.\par
\par
\b RoleController \b0 (backend/app/Controllers/RoleController.php)\par
- \i index()/show()/create()/update()/delete():\i0 CRUD untuk roles.\par
- \i getPermissions(role\_id):\i0 baca semua \i role\_permissions\i0 untuk role.\par
- \i updatePermissions(role\_id):\i0 hapus semua permissions role; insert batch dari \i menu\_ids[]\i0; balas sukses.\par
\par
\b Models \b0\par
- \i UserModel:\i0 mendefinisikan kolom yang diizinkan, timestamps; \i hashPassword()\i0 pada \i beforeInsert/beforeUpdate\i0.\par
- \i RoleModel:\i0 kolom role\_name, description; timestamps.\par
- \i MenuModel:\i0 kolom menu\_name, parent\_id, url, icon, menu\_order; timestamps.\par
\par
\b Filter JWT \b0\par
- \i before():\i0 izinkan OPTIONS; ekstraksi Bearer token; validasi signature & expiry; balas 401 jika invalid/missing; 500 jika secret tidak ada.\par
\par
\b 8.3 Penjelasan Fungsi Frontend \b0\par
\par
\b HTTP Client \b0 (frontend/src/lib/api.ts)\par
- \i axios.create():\i0 baseURL + Content-Type JSON.\par
- \i request interceptor:\i0 baca token dari localStorage (browser) dan menambahkan header Authorization: Bearer.\par
\par
\b AuthContext \b0 (frontend/src/contexts/AuthContext.tsx)\par
- \i login(newToken):\i0 simpan token ke localStorage, perbarui state.\par
- \i logout():\i0 hapus token & user dari state/localStorage.\par
- \i effect on token:\i0 memanggil \i api.get('/profile')\i0 untuk sinkronisasi user; jika gagal, logout.\par
\par
\b ProtectedRoute \b0 (frontend/src/components/ProtectedRoute.tsx)\par
- \i useEffect:\i0 jika tidak authenticated, redirect ke /login.\par
- render: tampilkan Loading atau children.\par
\par
\b AppShell \b0 (frontend/src/components/AppShell.tsx)\par
- Render Topbar + Sidebar + konten + Footer untuk halaman selain /login dan /register.\par
\par
\b Halaman Login \b0 (frontend/src/app/login/page.tsx)\par
- \i handleSubmit():\i0 POST /login dengan email/password; jika token didapat, \i login()\i0 dan redirect ke /dashboard; jika gagal, tampilkan error.\par
\par
\b Halaman Register \b0 (frontend/src/app/register/page.tsx)\par
- \i handleRegisterSubmit():\i0 POST /register; lanjut ke step OTP.\par
- \i handleOtpSubmit():\i0 POST /verify-otp; sukses â†’ redirect ke /login.\par
\par
\b Halaman Roles \b0 (frontend/src/app/roles/page.tsx)\par
- \i fetchRoles():\i0 GET /roles; muat daftar roles.\par
- \i handleAddSubmit():\i0 POST /roles; tutup modal; refresh.\par
- \i openEdit()/handleEditSubmit():\i0 set state edit; PUT /roles/:id; tutup modal; refresh.\par
- \i openPermModal():\i0 paralel GET /menus dan GET /roles/:id/permissions; normalisasi id; pre-check; fallback admin.\par
- \i toggleMenuSelection(), checkAll(), uncheckAll():\i0 kontrol checkbox.\par
- \i handlePermSubmit():\i0 POST /roles/:id/permissions dengan \i menu\_ids[]\i0.\par
- \i extractMenuIds():\i0 parser robust untuk berbagai bentuk payload backend (array, wrapped, associative, JSON string), mengembalikan \i number[]\i0.\par
- \i Pencarian & Paging:\i0 state \i search, pageSize, currentPage\i0; derive \i filteredRoles, pagedRoles, pageCount\i0; kontrol Prev/Next.\par
\par
\b Halaman Menus \b0 (frontend/src/app/menus/page.tsx)\par
- \i loadMenus():\i0 GET /menus; muat list.\par
- \i handleCreateSubmit():\i0 POST /menus; tutup modal; refresh.\par
- \i startEdit():\i0 isi state edit dari baris; buka modal edit.\par
- \i handleUpdateSubmit():\i0 PUT /menus/:id; tutup modal; refresh.\par
- \i handleDelete():\i0 konfirmasi; DELETE /menus/:id; refresh.\par
- \i Parent "Select2-like" (Tambah/Edit):\i0 \i filteredParents/editFilteredParents\i0 untuk pencarian parent; \i handleSelectParent/handleSelectParentEdit\i0 untuk memilih parent\_id; tombol "Reset ke Root".\par
- \i Pencarian & Paging:\i0 state \i search, pageSize, currentPage\i0; derive \i filteredMenus, sortedMenus, pagedMenus, pageCount\i0; kontrol Prev/Next.\par
\par
\b 8.4 Ringkasan Penerapan OOP \b0\par
- Backend: OOP dengan pewarisan (Controller, Model), enkapsulasi (allowedFields, timestamps), trait (ResponseTrait), interface (FilterInterface), komposisi (Services), hooks (callbacks hashing). Pola MVC memisahkan concerns.\par
- Frontend: Pendekatan komposisional dengan komponen fungsional & hooks; \i Context\i0 sebagai mekanisme dependency injection; modularisasi per fitur; TypeScript types untuk kontrak data yang jelas.\par
\par
Dengan penjelasan ini, developer dapat memahami bagaimana prinsip OOP diterapkan di backend (CI4) dan bagaimana frontend mengorganisir logika melalui komponen, hooks, dan context, serta fungsi-fungsi utama yang menggerakkan fitur-fitur seperti autentikasi, manajemen roles, dan menus.\par